import random
from time import time
import math

## Function to convert decimal to binary
def decToBin(num):
    if num < 0:
        num = num * -1
    
    tempDigit = 0
    bin = ''
    while num > 0:
        tempDigit = num % 2
        bin += str(tempDigit)
        num = num // 2
    bin = bin[::-1]
    return bin

## Function to convert flating point number to binary float notation
def floatToBin(num, form):
    ## Checks for initial bit
    if num < 0:
        sign = "1"
    elif num > 0:
        sign = "0"
        
    if num < 0:
        num = num * -1
    # Define necessary variables
    binFloat = ''
    exp = ''
    mant = ''
    sCand = ''
    bin = ''

    num = str(num)
    whole, dec = num.split(".")
    num = float(num)
    whole = int(whole)
    dec = int(dec)

    tempDigit = 0

    while whole > 0:
        tempDigit = whole % 2
        bin += str(tempDigit)
        whole = whole // 2
    bin = bin[::-1]
    bin += "."

## Handles digits following decimal and rounds off numbers that cannot be represented
    while dec >= 0:
        dec = dec * 10**-len(str(dec))
        dec = dec * 2
        dec = str(dec)
        dig, dec = dec.split(".")
        bin += str(dig)
        dec = int(dec)
        if form == "binary32":
            if len(bin) >= 32:
                break
        if form == "binary64":
            if len(bin) >= 64:
                break
        if form == "binary128":
            if len(bin) >= 128:
                break

    ## Retrieve Exponent in excess form
    for i in range(1, len(bin)):
        if bin[1] == '.':
            mant = "1"
            break
        if bin[i] == '.':
            break
        mant += bin[i]
    expDec = 0
    if len(mant) == 1:
        expLength = 0
    else:
        expLength = len(mant)
        
    print(expLength)
    
    if form == "binary32":
        expDec = expLength  + 127
    elif form == "binary64":
        expDec = expLength + 1023
    elif form == "binary128":
        expDec = expLength + 16383
    print(expDec)
    binTemp = 0
    binTemp = str(num)
    exp = str(decToBin(expDec))
    print(exp)
    if expDec == 127 or expDec == 1023 or expDec == 16383:
        exp = "0" + exp
    
## Retrieve Significand
    for i in range(1, len(bin)):
        if bin[i] == '.':
            continue
        sCand += bin[i]
       
    ## Combine terms to form standard format
        if binTemp[0] == "0":
            if form == "binary32":
                exp = "01111110"
            elif form == "binary64":
                exp = "01111111110"
            elif form == "binary128":
                exp = "0111111111111110"
            sCand = "0"
    binFloat = sign + exp + sCand
    if form == "binary32":
        while len(binFloat) < 32:
            binFloat += "0"
        while len(binFloat) > 32:
            binFloat = binFloat[:-1]
    elif form == "binary64":
        while len(binFloat) < 64:
            binFloat += "0"
        while len(binFloat) > 64:
            binFloat = binFloat[:-1]
    elif form == "binary128":
        while len(binFloat) < 128:
            binFloat += "0"
        while len(binFloat) > 128:
            binFloat = binFloat[:-1]

    return binFloat


## Main Driver function
def main():
   floatDec = 0.5
   form = "binary64"
   print(floatToBin(floatDec, form))

main()
